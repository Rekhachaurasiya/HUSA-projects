<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="LAPTOP-379A2RE2" ignored="8" name="Test" tests="40" failures="1" timestamp="2022-02-18T13:40:57 IST" time="168.95" errors="0">
  <testcase name="@BeforeMethod beforeMethod" time="122.269" classname="main.java.utility.Projectcommonmethodes">
    <failure type="org.openqa.selenium.WebDriverException" message="Failed to execute command handset open: Cannot open devices since devices are not available. Timeout is 120 seconds.
Command duration or timeout: 122.24 seconds">
      <![CDATA[org.openqa.selenium.WebDriverException: Failed to execute command handset open: Cannot open devices since devices are not available. Timeout is 120 seconds.
Command duration or timeout: 122.24 seconds
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.JsonWireProtocolResponse.lambda$errorHandler$0(JsonWireProtocolResponse.java:54)
at org.openqa.selenium.remote.HandshakeResponse.lambda$getResponseFunction$0(HandshakeResponse.java:30)
at org.openqa.selenium.remote.ProtocolHandshake.lambda$createSession$0(ProtocolHandshake.java:126)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Spliterators$ArraySpliterator.tryAdvance(Spliterators.java:958)
at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:499)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:486)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:128)
at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:74)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:136)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:213)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:131)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:144)
at main.java.utility.Projectcommonmethodes.invokebrowser(Projectcommonmethodes.java:199)
at main.java.utility.Projectcommonmethodes.beforeMethod(Projectcommonmethodes.java:85)
at java.util.ArrayList.forEach(ArrayList.java:1259)
Caused by: org.openqa.selenium.WebDriverException: Failed to execute command handset open: Cannot open devices since devices are not available. Timeout is 120 seconds.
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-379A2RE2', ip: '192.168.31.76', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_291'
Driver info: driver.version: unknown
at org.openqa.selenium.remote.server.PerfectoMobileSession$Factory.convertToRuntimeException(PerfectoMobileSession.java:166)
at org.openqa.selenium.remote.server.PerfectoMobileSession$Factory.apply(PerfectoMobileSession.java:150)
at org.openqa.selenium.remote.server.PerfectoMobileActiveSessionFactory.lambda$apply$3(PerfectoMobileActiveSessionFactory.java:117)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.ReferencePipeline$11$1.accept(ReferencePipeline.java:373)
at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
at java.util.Spliterators$ArraySpliterator.tryAdvance(Spliterators.java:958)
at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
at org.openqa.selenium.remote.server.PerfectoMobileActiveSessionFactory.apply(PerfectoMobileActiveSessionFactory.java:120)
at org.openqa.selenium.remote.server.NewSessionPipeline.lambda$null$2(NewSessionPipeline.java:66)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
at org.openqa.selenium.remote.server.NewSessionPipeline.lambda$createNewSession$3(NewSessionPipeline.java:69)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.DistinctOps$1$2.accept(DistinctOps.java:175)
at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
at java.util.stream.Streams$StreamBuilderImpl.tryAdvance(Streams.java:405)
at java.util.stream.Streams$ConcatSpliterator.tryAdvance(Streams.java:728)
at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
at org.openqa.selenium.remote.server.NewSessionPipeline.createNewSession(NewSessionPipeline.java:72)
at org.openqa.selenium.remote.server.commandhandler.BeginSession.execute(BeginSession.java:65)
at org.openqa.selenium.remote.server.MobileWebDriverServlet.lambda$handle$2(MobileWebDriverServlet.java:298)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
... Removed 35 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857097E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857098E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.6451718571E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.6451718571E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857103E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857105E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857109E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185711E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857114E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857115E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857119E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857119E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857123E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857124E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857127E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857128E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.64517185713E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185713E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857132E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857133E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857135E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857136E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857138E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185714E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857143E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857144E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857146E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857147E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857149E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185715E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857152E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857153E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857156E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857157E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.64517185716E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185716E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857164E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857164E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857168E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857168E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857171E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857172E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857175E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857175E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857176E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857177E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.64517185718E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185718E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857183E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857183E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857186E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857186E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857189E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185719E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857192E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857193E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857196E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857196E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857198E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857199E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857202E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857202E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857205E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857206E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857208E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.64517185721E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857212E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857213E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857215E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857215E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857217E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857218E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.64517185722E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857221E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857225E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="-1.645171857225E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="-1.645171857228E9" classname="main.java.utility.Projectcommonmethodes">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="TestCase" time="0.009" classname="main.java.utility.invokeapp">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
at main.java.pagesobject.FindDealer.verifydealer(FindDealer.java:56)
at main.java.testcase.Testcase.getsetData(Testcase.java:34)
at main.java.utility.invokeapp.TestCase(invokeapp.java:25)
at java.util.ArrayList.forEach(ArrayList.java:1259)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="TestCase" time="0.0" classname="main.java.utility.invokeapp">
    <skipped/>
  </testcase> <!-- TestCase -->
  <testcase name="@BeforeSuite beforeSuite" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase name="@BeforeSuite beforeSuite" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase name="@AfterSuite afterSuite" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase name="@AfterSuite afterSuite" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase name="@BeforeTest beforeTest" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase name="@BeforeTest beforeTest" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase name="@AfterTest afterTest" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase name="@AfterTest afterTest" time="0.0" classname="main.java.utility.Projectcommonmethodes">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
</testsuite> <!-- Test -->
